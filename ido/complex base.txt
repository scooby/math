2002-07-12 18:58:43

public class IntPair {
    public int a;
    public int b;
    public IntPair(_a, _b) {
	a = _a;
	b = _b;
    }
    public void leftShift(int x) {
	for(; x > 0; x--) {
	    int c = -a - b;
	    int d = a - b;
	    a = c;
	    b = d;
	}
    }

(a+bi)*(-1+i)
(-a+ai-bi-b)
((-a-b)+(a-b)i)

 0 pz 1+0
 1 np -1+i
 2 zn 0-2i
 3 pp 2+2i
 4 nz -4+0i
 5 pn 4-4i
 6 zp 0+8i
 7 nn -8-8i

0: 1, 0
1:-1, 1
2: 0,-1
3: 1, 1
4:-1, 0
5: 1,-1
6: 0, 1
7:-1,-1

163
4 0
725

(a+bi)/(-1+i)
(a+bi)(-1-i)/(-1+i)(-1-i)
(-a-ai-bi+b)/(1+i-i+1)
(b-a)/2-(a+b)i/2

 0 pz 1+0
-1 nn -1/2-i/2
-2 zp 0+i/2
-3 pn 1/4-i/4
-4 nz -1/4+0
-5 pp 1/8+i/8
-6 zn 0-i/8
-7 np -1/16+i/16

---------------------------------------------------------------------
Terms and representation
---------------------------------------------------------------------

Noting that a whole number x can be represented as:

    x = sum(n = 0..inf, b[n]*2^n)

Termed a binary sum because for all n, b[n] is a member
of {0, 1}. If n went from -inf to inf, it would be
 "the" binary sum because it'd be the only binary sum where
the exponent is 2. The binary sum can represent any positive
real, or zero.

And that any real number can be expressed as

    x = sum(n = -inf..inf, b[n]*(-2)^n)

This is a binary sum also, specifically it is the negabinary
sum because the exponent is -2.

I conjecture that any complex number of the form p + qi,
where p and q are integers, can be represented similarly as:

    x = sum(n = 0..inf, b[n]*(i-1)^n)

Where b[n] is again a bit and i is the square root of -1.

I have not investigated, but strongly suspect that:

    x = sum(n = -inf..inf, b[n]*(i-1)^n)

Is a valid representation for any complex number. The name of the
base is "i-dash-one" which when abbreviated gives the faux Latin
prefix "ido." This is the idonary sum, pronounced "id uh nary."

In a binary number, values for b[n] are called bits. In an idonary
number, they are called idgits, rhymes with digits.

Note: base is represented with suffix b for binary, ~ for idonary and
no symbol for decimal. Also, in equations ~^n means (i-1)^n.

---------------------------------------------------------------------
Basic ops
---------------------------------------------------------------------
Note that:
~^0 = 1
~^1 = -1+i
~^2 = -2i
~^3 = 2+2i
~^4 = -4

How high can we count, in wholes, with these exponents? Not very:

-4 is 10000~
-3 is 10001~
-2 is 11100~
-1 is 11101~
 0 is     0~
 1 is     1~
 2 is  1100~
 3 is  1101~

... Many attempts to figuring out an algorithm, no luck so far.

2005-05-01 12:55:05

There's got to be a simple algorithm here, at least for whole numbers.
Let's just try working it out for positive integers:

We know that it cycles:
 0 pz 1+0
 1 np -1+i
 2 zn 0-2i
 3 pp 2+2i
 4 nz -4+0i
 5 pn 4-4i
 6 zp 0+8i
 7 nn -8-8i

So -8-8i * -1+i = 8 - 8i + 8i + 8 = 16+0

That means that we're getting powers of 16 for free.
Our other zero points are:
-2i, -4, 8i.

Let's have the computer brute force all possible combinations of 
a + bi where a and b are from -15 to 15.

Ehh... I forgot just how many weird numbers it comes up with.

I guess the reason I'm not pursuing this is because it seems much harder than just saying that every 8 bits in my complex representation line up with 4 bits each for the real and complex components.

Maybe it would make more sense if I looked at it with polar coordinates...
